// Generated by CoffeeScript 1.7.1
(function($) {
  $.kladr = {};
  $.kladr.url = "http://kladr-api.ru/api.php";
  $.kladr.type = {
    region: "region",
    district: "district",
    city: "city",
    street: "street",
    building: "building"
  };
  $.kladr.api = function(query, callback) {
    var completed, params;
    params = {};
    if (query.token) {
      params.token = query.token;
    }
    if (query.key) {
      params.key = query.key;
    }
    if (query.type) {
      params.contentType = query.type;
    }
    if (query.name) {
      params.query = query.name;
    }
    if (query.parentType && query.parentId) {
      params[query.parentType + "Id"] = query.parentId;
    }
    if (query.withParents) {
      params.withParent = 1;
    }
    params.limit = (query.limit ? query.limit : 2000);
    completed = false;
    $.getJSON($.kladr.url + "?callback=?", params, function(data) {
      if (completed) {
        return;
      }
      completed = true;
      callback && callback(data.result);
    });
    setTimeout((function() {
      if (completed) {
        return;
      }
      completed = true;
      console.error("Request error");
      callback && callback([]);
    }), 5000);
  };
  $.kladr.check = function(query, callback) {
    query.withParents = false;
    query.limit = 1;
    $.kladr.api(query, function(objs) {
      if (objs && objs.length) {
        callback && callback(objs[0]);
      } else {
        callback && callback(false);
      }
    });
  };
})(jQuery);

(function($, undefined_) {
  $.fn.kladr = function(param1, param2) {
    debugger;
    var kladr, result;
    kladr = function(input, param1, param2) {
      var ac, change, close, create, defaultOptions, init, key, keys, keyselect, mouseselect, open, options, position, render, select, spinner, spinnerHide, spinnerInterval, spinnerShow, spinnerStart, trigger, validate;
      ac = {};
      spinner = {};
      options = {};
      init = function(param1, param2, callback) {
        var i;
        options = input.data("kladr-options");
        if (param2 !== undefined) {
          options[param1] = param2;
          input.data("kladr-options", options);
          return input;
        }
        if ($.type(param1) === "string") {
          if (!options) {
            return null;
          }
          return options[param1];
        }
        if (options) {
          return input;
        }
        options = defaultOptions;
        if ($.type(param1) === "object") {
          for (i in param1) {
            options[i] = param1[i];
          }
        }
        input.data("kladr-options", options);
        callback && callback();
        return input;
      };
      create = function() {
        var container, inputName;
        container = $(document.getElementById("kladr_autocomplete"));
        inputName = input.attr("name");
        if (!container.length) {
          container = $("<div id=\"kladr_autocomplete\"></div>").appendTo("body");
        }
        input.attr("autocomplete", "off");
        ac = $("<ul class=\"kladr_autocomplete_" + inputName + "\" style=\"display: none;\"></ul>");
        ac.appendTo(container);
        spinner = $("<div class=\"spinner kladr_autocomplete_" + inputName + "_spinner\" class=\"spinner\" style=\"display: none;\"></div>");
        spinner.appendTo(container);
      };
      render = function(objs, query) {
        var a, i, label, li, obj, value;
        ac.empty();
        for (i in objs) {
          obj = objs[i];
          value = options.valueFormat(obj, query);
          label = options.labelFormat(obj, query);
          a = $("<a data-val=\"" + value + "\">" + label + "</a>");
          a.data("kladr-object", obj);
          li = $("<li></li>").append(a);
          li.appendTo(ac);
        }
      };
      position = function() {
        var differ, inputHeight, inputOffset, inputWidth, spinnerHeight, spinnerWidth;
        inputOffset = input.offset();
        inputWidth = input.outerWidth();
        inputHeight = input.outerHeight();
        ac.css({
          top: inputOffset.top + inputHeight + "px",
          left: inputOffset.left
        });
        differ = ac.outerWidth() - ac.width();
        ac.width(inputWidth - differ);
        spinnerWidth = spinner.width();
        spinnerHeight = spinner.height();
        spinner.css({
          top: inputOffset.top + (inputHeight - spinnerHeight) / 2 - 1,
          left: inputOffset.left + inputWidth - spinnerWidth - 2
        });
      };
      open = function(event) {
        var query;
        if ((event.which > 8) && (event.which < 46)) {
          return;
        }
        if (!validate()) {
          return;
        }
        query = key(input.val());
        if (!$.trim(query)) {
          close();
          return;
        }
        spinnerShow();
        trigger("send");
        options.source(query, function(objs) {
          spinnerHide();
          trigger("received");
          if (!input.is(":focus")) {
            close();
            return;
          }
          if (!$.trim(input.val()) || !objs.length) {
            close();
            return;
          }
          render(objs, query);
          position();
          ac.slideDown(50);
          trigger("open");
        });
      };
      close = function() {
        select();
        ac.hide();
        trigger("close");
      };
      validate = function() {
        switch (options.type) {
          case $.kladr.type.region:
          case $.kladr.type.district:
          case $.kladr.type.city:
            if (options.parentType && !options.parentId) {
              console.error("parentType is defined and parentId in not");
              return false;
            }
            break;
          case $.kladr.type.street:
            if (options.parentType !== $.kladr.type.city) {
              console.error("For street parentType must equal \"city\"");
              return false;
            }
            if (!options.parentId) {
              console.error("For street parentId must defined");
              return false;
            }
            break;
          case $.kladr.type.building:
            if (options.parentType !== $.kladr.type.street) {
              console.error("For building parentType must equal \"street\"");
              return false;
            }
            if (!options.parentId) {
              console.error("For building parentId must defined");
              return false;
            }
            break;
          default:
            console.error("type must defined and equal \"region\", \"district\", \"city\", \"street\" or \"building\"");
            return false;
        }
        if (options.limit < 1) {
          console.error("limit must greater than 0");
          return false;
        }
        return true;
      };
      select = function() {
        var a;
        a = ac.find(".active a");
        if (!a.length) {
          return;
        }
        input.val(a.attr("data-val"));
        options.current = a.data("kladr-object");
        input.data("kladr-options", options);
        trigger("select", options.current);
      };
      keyselect = function(event) {
        var active, obj;
        active = ac.find("li.active");
        switch (event.which) {
          case keys.up:
            if (active.length) {
              active.removeClass("active");
              active = active.prev();
            } else {
              active = ac.find("li").last();
            }
            active.addClass("active");
            obj = active.find("a").data("kladr-object");
            trigger("preselect", obj);
            if (options.arrowSelect) {
              return select();
            }
            break;
          case keys.down:
            if (active.length) {
              active.removeClass("active");
              active = active.next();
            } else {
              active = ac.find("li").first();
            }
            active.addClass("active");
            obj = active.find("a").data("kladr-object");
            trigger("preselect", obj);
            if (options.arrowSelect) {
              return select();
            }
            break;
          case keys.esc:
            active.removeClass("active");
            return close();
          case keys.enter:
            if (!options.arrowSelect) {
              select();
            }
            active.removeClass("active");
            close();
            return false;
        }
      };
      mouseselect = function() {
        close();
        input.focus();
        return false;
      };
      change = function() {
        var query;
        if (!options.verify) {
          return;
        }
        if (!validate()) {
          return;
        }
        query = key(input.val());
        if (!$.trim(query)) {
          return;
        }
        spinnerShow();
        trigger("send");
        options.source(query, function(objs) {
          var i, nameLowerCase, obj, queryLowerCase;
          spinnerHide();
          trigger("received");
          obj = null;
          i = 0;
          while (i < objs.length) {
            queryLowerCase = query.toLowerCase();
            nameLowerCase = objs[i].name.toLowerCase();
            if (queryLowerCase === nameLowerCase) {
              obj = objs[i];
              break;
            }
            i++;
          }
          if (obj) {
            input.val(options.valueFormat(obj, query));
          }
          options.current = obj;
          input.data("kladr-options", options);
          trigger("check", options.current);
        });
      };
      key = function(val) {
        var ch, en, i, index, ru, strNew;
        en = "1234567890qazwsxedcrfvtgbyhnujmik,ol.p;[']- " + "QAZWSXEDCRFVTGBYHNUJMIK<OL>P:{\"} ";
        ru = "1234567890йфяцычувскамепинртгоьшлбщдюзжхэъ- " + "ЙФЯЦЫЧУВСКАМЕПИНРТГОЬШЛБЩДЮЗЖХЭЪ ";
        strNew = "";
        ch = void 0;
        index = void 0;
        i = 0;
        while (i < val.length) {
          ch = val[i];
          index = en.indexOf(ch);
          if (index > -1) {
            strNew += ru[index];
            continue;
          }
          strNew += ch;
          i++;
        }
        return strNew;
      };
      trigger = function(event, obj) {
        if (!event) {
          return;
        }
        input.trigger("kladr_" + event, obj);
        if (options[event]) {
          options[event].call(input.get(0), obj);
        }
      };
      spinnerStart = function() {
        var spinnerInterval, top;
        if (spinnerInterval) {
          return;
        }
        top = -0.2;
        spinnerInterval = setInterval(function() {
          if (!spinner.is(":visible")) {
            clearInterval(spinnerInterval);
            spinnerInterval = null;
            return;
          }
          spinner.css("background-position", "0% " + top + "%");
          top += 5.555556;
          if (top > 95) {
            top = -0.2;
          }
        }, 30);
      };
      spinnerShow = function() {
        if (options.showSpinner) {
          spinner.show();
          spinnerStart();
        }
      };
      spinnerHide = function() {
        spinner.hide();
      };
      ac = null;
      spinner = null;
      options = null;
      defaultOptions = {
        token: null,
        key: null,
        type: null,
        parentType: null,
        parentId: null,
        limit: 10,
        withParents: false,
        verify: false,
        showSpinner: true,
        arrowSelect: true,
        current: null,
        open: null,
        close: null,
        send: null,
        received: null,
        select: null,
        check: null,
        source: function(query, callback) {
          var params;
          params = {
            token: options.token,
            key: options.token,
            type: options.type,
            name: query,
            parentType: options.parentType,
            parentId: options.parentId,
            withParents: options.withParents,
            limit: options.limit
          };
          $.kladr.api(params, callback);
        },
        labelFormat: function(obj, query) {
          var label, name, start;
          label = "";
          name = obj.name.toLowerCase();
          query = query.toLowerCase();
          start = name.indexOf(query);
          start = (start > 0 ? start : 0);
          if (obj.typeShort) {
            label += obj.typeShort + ". ";
          }
          if (query.length < obj.name.length) {
            label += obj.name.substr(0, start);
            label += "<strong>" + obj.name.substr(start, query.length) + "</strong>";
            label += obj.name.substr(start + query.length, obj.name.length - query.length - start);
          } else {
            label += "<strong>" + obj.name + "</strong>";
          }
          return label;
        },
        valueFormat: function(obj, query) {
          return obj.name;
        }
      };
      keys = {
        up: 38,
        down: 40,
        esc: 27,
        enter: 13
      };
      spinnerInterval = null;
      return init(param1, param2, function() {
        var isActive;
        isActive = false;
        create();
        position();
        input.keyup(open);
        input.keydown(keyselect);
        input.change(function() {
          if (!isActive) {
            change();
          }
        });
        input.blur(function() {
          if (!isActive) {
            close();
          }
        });
        ac.on("click", "li, a", mouseselect);
        ac.on("mouseenter", "li", function() {
          var $this, obj;
          $this = $(this);
          ac.find("li.active").removeClass("active");
          $this.addClass("active");
          obj = $this.find("a").data("kladr-object");
          trigger("preselect", obj);
          isActive = true;
        });
        ac.on("mouseleave", "li", function() {
          $(this).removeClass("active");
          isActive = false;
        });
        $(window).resize(position);
      });
    };
    result = undefined;
    this.each(function() {
      var res;
      res = kladr($(this), param1, param2);
      if (result === undefined) {
        result = res;
      }
    });
    return result;
  };
})(jQuery);

//# sourceMappingURL=jquery.kladr.new.map
